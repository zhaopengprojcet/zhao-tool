<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zhao.common.pojo.dao.ZwhiteBlackIpListMapper" >
	<resultMap id="BaseResultMap" type="org.zhao.common.pojo.model.ZwhiteBlackIpList" >
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="bw_type" property="bwType" jdbcType="VARCHAR" />
		<result column="add_desc" property="addDesc" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="ip" property="ip" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id,bw_type,add_desc,create_time,ip
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from R_IP_BW
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from R_IP_BW
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.zhao.common.pojo.model.ZwhiteBlackIpList" useGeneratedKeys="true" keyProperty="id">
		insert into R_IP_BW (id,bw_type,add_desc,create_time,ip)
		values (
			#{record.id,jdbcType=VARCHAR},
			#{record.bwType,jdbcType=VARCHAR},
			#{record.addDesc,jdbcType=VARCHAR},
			#{record.createTime,jdbcType=TIMESTAMP},
			#{record.ip,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.zhao.common.pojo.model.ZwhiteBlackIpList" useGeneratedKeys="true" keyProperty="id">
		insert into R_IP_BW
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				id,
			</if>
			<if test="record.bwType != null and record.bwType != '' ">
				bw_type,
			</if>
			<if test="record.addDesc != null and record.addDesc != '' ">
				add_desc,
			</if>
			<if test="record.createTime != null ">
				create_time,
			</if>
			<if test="record.ip != null and record.ip != '' ">
				ip,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				#{record.id,jdbcType=VARCHAR},
			</if>
			<if test="record.bwType != null and record.bwType != '' ">
				#{record.bwType,jdbcType=VARCHAR},
			</if>
			<if test="record.addDesc != null and record.addDesc != '' ">
				#{record.addDesc,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				#{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.ip != null and record.ip != '' ">
				#{record.ip,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.zhao.common.pojo.model.ZwhiteBlackIpList">
		update R_IP_BW
		<set>
			<if test="record.bwType != null and record.bwType != '' ">
				bw_type = #{record.bwType,jdbcType=VARCHAR},
			</if>
			<if test="record.addDesc != null and record.addDesc != '' ">
				add_desc = #{record.addDesc,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.ip != null and record.ip != '' ">
				ip = #{record.ip,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.zhao.common.pojo.model.ZwhiteBlackIpList">
		update R_IP_BW
		set
		bw_type = #{record.bwType,jdbcType=VARCHAR}
		add_desc = #{record.addDesc,jdbcType=VARCHAR}
		create_time = #{record.createTime,jdbcType=TIMESTAMP}
		ip = #{record.ip,jdbcType=VARCHAR}
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<select id="selectPageListByParameters" resultMap="BaseResultMap">
		select * from R_IP_BW where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.bwType != null and record.bwType != '' ">
			and bw_type = #{record.bwType,jdbcType=VARCHAR}
		</if>
		<if test="record.addDesc != null and record.addDesc != '' ">
			and add_desc = #{record.addDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.ip != null and record.ip != '' ">
			and ip = #{record.ip,jdbcType=VARCHAR}
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParametersCount" parameterType="org.zhao.common.pojo.model.ZwhiteBlackIpList" resultType="java.lang.Integer">
		select count(*) from R_IP_BW where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.bwType != null and record.bwType != '' ">
			and bw_type = #{record.bwType,jdbcType=VARCHAR}
		</if>
		<if test="record.addDesc != null and record.addDesc != '' ">
			and add_desc = #{record.addDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.ip != null and record.ip != '' ">
			and ip = #{record.ip,jdbcType=VARCHAR}
		</if>
	</select>
	<select id="selectPageListByParameterRequire" resultMap="BaseResultMap">
		select * from R_IP_BW where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.bwType != null">
			<if test="require.bwType.greaterThan != null">
					and bw_type > #{require.bwType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.lessThan != null">
					and bw_type &lt; #{require.bwType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.greaterThanAndEquals != null">
					and bw_type >= #{require.bwType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.lessThanAndEquals != null">
					and bw_type &lt;= #{require.bwType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.notEquality != null">
					and bw_type &lt;> #{require.bwType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.equality != null">
					and bw_type = #{require.bwType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.similar != null">
					and INSTR(bw_type, #{require.bwType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.addDesc != null">
			<if test="require.addDesc.greaterThan != null">
					and add_desc > #{require.addDesc.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.lessThan != null">
					and add_desc &lt; #{require.addDesc.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.greaterThanAndEquals != null">
					and add_desc >= #{require.addDesc.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.lessThanAndEquals != null">
					and add_desc &lt;= #{require.addDesc.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.notEquality != null">
					and add_desc &lt;> #{require.addDesc.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.equality != null">
					and add_desc = #{require.addDesc.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.similar != null">
					and INSTR(add_desc, #{require.addDesc.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.ip != null">
			<if test="require.ip.greaterThan != null">
					and ip > #{require.ip.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.lessThan != null">
					and ip &lt; #{require.ip.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.greaterThanAndEquals != null">
					and ip >= #{require.ip.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.lessThanAndEquals != null">
					and ip &lt;= #{require.ip.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.notEquality != null">
					and ip &lt;> #{require.ip.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.equality != null">
					and ip = #{require.ip.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.similar != null">
					and INSTR(ip, #{require.ip.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParameterRequireCount" parameterType="org.zhao.common.pojo.model.ZwhiteBlackIpList" resultType="java.lang.Integer">
		select count(*) from R_IP_BW where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.bwType != null">
			<if test="require.bwType.greaterThan != null">
					and bw_type > #{require.bwType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.lessThan != null">
					and bw_type &lt; #{require.bwType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.greaterThanAndEquals != null">
					and bw_type >= #{require.bwType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.lessThanAndEquals != null">
					and bw_type &lt;= #{require.bwType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.notEquality != null">
					and bw_type &lt;> #{require.bwType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.equality != null">
					and bw_type = #{require.bwType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.bwType.similar != null">
					and INSTR(bw_type, #{require.bwType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.addDesc != null">
			<if test="require.addDesc.greaterThan != null">
					and add_desc > #{require.addDesc.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.lessThan != null">
					and add_desc &lt; #{require.addDesc.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.greaterThanAndEquals != null">
					and add_desc >= #{require.addDesc.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.lessThanAndEquals != null">
					and add_desc &lt;= #{require.addDesc.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.notEquality != null">
					and add_desc &lt;> #{require.addDesc.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.equality != null">
					and add_desc = #{require.addDesc.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.addDesc.similar != null">
					and INSTR(add_desc, #{require.addDesc.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.ip != null">
			<if test="require.ip.greaterThan != null">
					and ip > #{require.ip.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.lessThan != null">
					and ip &lt; #{require.ip.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.greaterThanAndEquals != null">
					and ip >= #{require.ip.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.lessThanAndEquals != null">
					and ip &lt;= #{require.ip.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.notEquality != null">
					and ip &lt;> #{require.ip.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.equality != null">
					and ip = #{require.ip.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.ip.similar != null">
					and INSTR(ip, #{require.ip.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
	</select>
	<insert id="batchCreate" parameterType="java.util.List">
		insert into R_IP_BW (
		id,bw_type,add_desc,create_time,ip
		) values
		<foreach collection="list" item="item" index="index" separator=",">
			(
			#{item.id,jdbcType=VARCHAR},
			#{item.bwType,jdbcType=VARCHAR},
			#{item.addDesc,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP},
			#{item.ip,jdbcType=VARCHAR}
			)
		</foreach>
	</insert>
	<delete id="deleteByParames" parameterType="org.zhao.common.pojo.model.ZwhiteBlackIpList">
		delete from R_IP_BW where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.bwType != null and record.bwType != '' ">
			and bw_type = #{record.bwType,jdbcType=VARCHAR}
		</if>
		<if test="record.addDesc != null and record.addDesc != '' ">
			and add_desc = #{record.addDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.ip != null and record.ip != '' ">
			and ip = #{record.ip,jdbcType=VARCHAR}
		</if>
	</delete>
</mapper>