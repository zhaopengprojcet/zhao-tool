<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zhao.common.pojo.dao.ZLogModelMapper" >
	<resultMap id="BaseResultMap" type="org.zhao.common.pojo.model.ZLogModel" >
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="log_type" property="logType" jdbcType="VARCHAR" />
		<result column="log_desc" property="logDesc" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="log_key" property="logKey" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id,log_type,log_desc,create_time,log_key
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from R_LOG
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from R_LOG
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.zhao.common.pojo.model.ZLogModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_LOG (id,log_type,log_desc,create_time,log_key)
		values (
			#{record.id,jdbcType=VARCHAR},
			#{record.logType,jdbcType=VARCHAR},
			#{record.logDesc,jdbcType=VARCHAR},
			#{record.createTime,jdbcType=TIMESTAMP},
			#{record.logKey,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.zhao.common.pojo.model.ZLogModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_LOG
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				id,
			</if>
			<if test="record.logType != null and record.logType != '' ">
				log_type,
			</if>
			<if test="record.logDesc != null and record.logDesc != '' ">
				log_desc,
			</if>
			<if test="record.createTime != null ">
				create_time,
			</if>
			<if test="record.logKey != null and record.logKey != '' ">
				log_key,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				#{record.id,jdbcType=VARCHAR},
			</if>
			<if test="record.logType != null and record.logType != '' ">
				#{record.logType,jdbcType=VARCHAR},
			</if>
			<if test="record.logDesc != null and record.logDesc != '' ">
				#{record.logDesc,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				#{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.logKey != null and record.logKey != '' ">
				#{record.logKey,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.zhao.common.pojo.model.ZLogModel">
		update R_LOG
		<set>
			<if test="record.logType != null and record.logType != '' ">
				log_type = #{record.logType,jdbcType=VARCHAR},
			</if>
			<if test="record.logDesc != null and record.logDesc != '' ">
				log_desc = #{record.logDesc,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.logKey != null and record.logKey != '' ">
				log_key = #{record.logKey,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.zhao.common.pojo.model.ZLogModel">
		update R_LOG
		set
		log_type = #{record.logType,jdbcType=VARCHAR}
		log_desc = #{record.logDesc,jdbcType=VARCHAR}
		create_time = #{record.createTime,jdbcType=TIMESTAMP}
		log_key = #{record.logKey,jdbcType=VARCHAR}
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<select id="selectPageListByParameters" resultMap="BaseResultMap">
		select * from R_LOG where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.logType != null and record.logType != '' ">
			and log_type = #{record.logType,jdbcType=VARCHAR}
		</if>
		<if test="record.logDesc != null and record.logDesc != '' ">
			and log_desc = #{record.logDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.logKey != null and record.logKey != '' ">
			and log_key = #{record.logKey,jdbcType=VARCHAR}
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParametersCount" parameterType="org.zhao.common.pojo.model.ZLogModel" resultType="java.lang.Integer">
		select count(*) from R_LOG where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.logType != null and record.logType != '' ">
			and log_type = #{record.logType,jdbcType=VARCHAR}
		</if>
		<if test="record.logDesc != null and record.logDesc != '' ">
			and log_desc = #{record.logDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.logKey != null and record.logKey != '' ">
			and log_key = #{record.logKey,jdbcType=VARCHAR}
		</if>
	</select>
	<select id="selectPageListByParameterRequire" resultMap="BaseResultMap">
		select * from R_LOG where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.logType != null">
			<if test="require.logType.greaterThan != null">
					and log_type > #{require.logType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.lessThan != null">
					and log_type &lt; #{require.logType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.greaterThanAndEquals != null">
					and log_type >= #{require.logType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.lessThanAndEquals != null">
					and log_type &lt;= #{require.logType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.notEquality != null">
					and log_type &lt;> #{require.logType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.equality != null">
					and log_type = #{require.logType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.similar != null">
					and INSTR(log_type, #{require.logType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.logDesc != null">
			<if test="require.logDesc.greaterThan != null">
					and log_desc > #{require.logDesc.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.lessThan != null">
					and log_desc &lt; #{require.logDesc.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.greaterThanAndEquals != null">
					and log_desc >= #{require.logDesc.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.lessThanAndEquals != null">
					and log_desc &lt;= #{require.logDesc.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.notEquality != null">
					and log_desc &lt;> #{require.logDesc.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.equality != null">
					and log_desc = #{require.logDesc.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.similar != null">
					and INSTR(log_desc, #{require.logDesc.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.logKey != null">
			<if test="require.logKey.greaterThan != null">
					and log_key > #{require.logKey.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.lessThan != null">
					and log_key &lt; #{require.logKey.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.greaterThanAndEquals != null">
					and log_key >= #{require.logKey.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.lessThanAndEquals != null">
					and log_key &lt;= #{require.logKey.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.notEquality != null">
					and log_key &lt;> #{require.logKey.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.equality != null">
					and log_key = #{require.logKey.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.similar != null">
					and INSTR(log_key, #{require.logKey.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParameterRequireCount" parameterType="org.zhao.common.pojo.model.ZLogModel" resultType="java.lang.Integer">
		select count(*) from R_LOG where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.logType != null">
			<if test="require.logType.greaterThan != null">
					and log_type > #{require.logType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.lessThan != null">
					and log_type &lt; #{require.logType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.greaterThanAndEquals != null">
					and log_type >= #{require.logType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.lessThanAndEquals != null">
					and log_type &lt;= #{require.logType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.notEquality != null">
					and log_type &lt;> #{require.logType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.equality != null">
					and log_type = #{require.logType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logType.similar != null">
					and INSTR(log_type, #{require.logType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.logDesc != null">
			<if test="require.logDesc.greaterThan != null">
					and log_desc > #{require.logDesc.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.lessThan != null">
					and log_desc &lt; #{require.logDesc.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.greaterThanAndEquals != null">
					and log_desc >= #{require.logDesc.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.lessThanAndEquals != null">
					and log_desc &lt;= #{require.logDesc.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.notEquality != null">
					and log_desc &lt;> #{require.logDesc.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.equality != null">
					and log_desc = #{require.logDesc.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logDesc.similar != null">
					and INSTR(log_desc, #{require.logDesc.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.logKey != null">
			<if test="require.logKey.greaterThan != null">
					and log_key > #{require.logKey.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.lessThan != null">
					and log_key &lt; #{require.logKey.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.greaterThanAndEquals != null">
					and log_key >= #{require.logKey.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.lessThanAndEquals != null">
					and log_key &lt;= #{require.logKey.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.notEquality != null">
					and log_key &lt;> #{require.logKey.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.equality != null">
					and log_key = #{require.logKey.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.logKey.similar != null">
					and INSTR(log_key, #{require.logKey.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
	</select>
	<insert id="batchCreate" parameterType="java.util.List">
		insert into R_LOG (
		id,log_type,log_desc,create_time,log_key
		) values
		<foreach collection="list" item="item" index="index" separator=",">
			(
			#{item.id,jdbcType=VARCHAR},
			#{item.logType,jdbcType=VARCHAR},
			#{item.logDesc,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP},
			#{item.logKey,jdbcType=VARCHAR}
			)
		</foreach>
	</insert>
	<delete id="deleteByParames" parameterType="org.zhao.common.pojo.model.ZLogModel">
		delete from R_LOG where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.logType != null and record.logType != '' ">
			and log_type = #{record.logType,jdbcType=VARCHAR}
		</if>
		<if test="record.logDesc != null and record.logDesc != '' ">
			and log_desc = #{record.logDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.logKey != null and record.logKey != '' ">
			and log_key = #{record.logKey,jdbcType=VARCHAR}
		</if>
	</delete>
</mapper>