<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zhao.common.pojo.dao.ZuserModelMapper" >
	<resultMap id="BaseResultMap" type="org.zhao.common.pojo.model.ZuserModel" >
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="info_id" property="infoId" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="user_state" property="userState" jdbcType="VARCHAR" />
		<result column="role_id" property="roleId" jdbcType="VARCHAR" />
		<result column="login_name" property="loginName" jdbcType="VARCHAR" />
		<result column="role_name" property="roleName" jdbcType="VARCHAR" />
		<result column="login_error_count" property="loginErrorCount" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		id,last_login_time,password,info_id,create_time,user_state,role_id,login_name,role_name,login_error_count
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from R_USER
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from R_USER
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.zhao.common.pojo.model.ZuserModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_USER (id,last_login_time,password,info_id,create_time,user_state,role_id,login_name,role_name,login_error_count)
		values (
			#{record.id,jdbcType=VARCHAR},
			#{record.lastLoginTime,jdbcType=TIMESTAMP},
			#{record.password,jdbcType=VARCHAR},
			#{record.infoId,jdbcType=VARCHAR},
			#{record.createTime,jdbcType=TIMESTAMP},
			#{record.userState,jdbcType=VARCHAR},
			#{record.roleId,jdbcType=VARCHAR},
			#{record.loginName,jdbcType=VARCHAR},
			#{record.roleName,jdbcType=VARCHAR},
			#{record.loginErrorCount,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.zhao.common.pojo.model.ZuserModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_USER
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				id,
			</if>
			<if test="record.lastLoginTime != null ">
				last_login_time,
			</if>
			<if test="record.password != null and record.password != '' ">
				password,
			</if>
			<if test="record.infoId != null and record.infoId != '' ">
				info_id,
			</if>
			<if test="record.createTime != null ">
				create_time,
			</if>
			<if test="record.userState != null and record.userState != '' ">
				user_state,
			</if>
			<if test="record.roleId != null and record.roleId != '' ">
				role_id,
			</if>
			<if test="record.loginName != null and record.loginName != '' ">
				login_name,
			</if>
			<if test="record.roleName != null and record.roleName != '' ">
				role_name,
			</if>
			<if test="record.loginErrorCount != null and record.loginErrorCount != '' ">
				login_error_count,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				#{record.id,jdbcType=VARCHAR},
			</if>
			<if test="record.lastLoginTime != null ">
				#{record.lastLoginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.password != null and record.password != '' ">
				#{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.infoId != null and record.infoId != '' ">
				#{record.infoId,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				#{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.userState != null and record.userState != '' ">
				#{record.userState,jdbcType=VARCHAR},
			</if>
			<if test="record.roleId != null and record.roleId != '' ">
				#{record.roleId,jdbcType=VARCHAR},
			</if>
			<if test="record.loginName != null and record.loginName != '' ">
				#{record.loginName,jdbcType=VARCHAR},
			</if>
			<if test="record.roleName != null and record.roleName != '' ">
				#{record.roleName,jdbcType=VARCHAR},
			</if>
			<if test="record.loginErrorCount != null and record.loginErrorCount != '' ">
				#{record.loginErrorCount,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.zhao.common.pojo.model.ZuserModel">
		update R_USER
		<set>
			<if test="record.lastLoginTime != null ">
				last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.password != null and record.password != '' ">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.infoId != null and record.infoId != '' ">
				info_id = #{record.infoId,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.userState != null and record.userState != '' ">
				user_state = #{record.userState,jdbcType=VARCHAR},
			</if>
			<if test="record.roleId != null and record.roleId != '' ">
				role_id = #{record.roleId,jdbcType=VARCHAR},
			</if>
			<if test="record.loginName != null and record.loginName != '' ">
				login_name = #{record.loginName,jdbcType=VARCHAR},
			</if>
			<if test="record.roleName != null and record.roleName != '' ">
				role_name = #{record.roleName,jdbcType=VARCHAR},
			</if>
			<if test="record.loginErrorCount != null and record.loginErrorCount != '' ">
				login_error_count = #{record.loginErrorCount,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.zhao.common.pojo.model.ZuserModel">
		update R_USER
		set
		last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP}
		password = #{record.password,jdbcType=VARCHAR}
		info_id = #{record.infoId,jdbcType=VARCHAR}
		create_time = #{record.createTime,jdbcType=TIMESTAMP}
		user_state = #{record.userState,jdbcType=VARCHAR}
		role_id = #{record.roleId,jdbcType=VARCHAR}
		login_name = #{record.loginName,jdbcType=VARCHAR}
		role_name = #{record.roleName,jdbcType=VARCHAR}
		login_error_count = #{record.loginErrorCount,jdbcType=INTEGER}
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<select id="selectPageListByParameters" resultMap="BaseResultMap">
		select * from R_USER where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.lastLoginTime != null ">
			and last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.password != null and record.password != '' ">
			and password = #{record.password,jdbcType=VARCHAR}
		</if>
		<if test="record.infoId != null and record.infoId != '' ">
			and info_id = #{record.infoId,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.userState != null and record.userState != '' ">
			and user_state = #{record.userState,jdbcType=VARCHAR}
		</if>
		<if test="record.roleId != null and record.roleId != '' ">
			and role_id = #{record.roleId,jdbcType=VARCHAR}
		</if>
		<if test="record.loginName != null and record.loginName != '' ">
			and login_name = #{record.loginName,jdbcType=VARCHAR}
		</if>
		<if test="record.roleName != null and record.roleName != '' ">
			and role_name = #{record.roleName,jdbcType=VARCHAR}
		</if>
		<if test="record.loginErrorCount != null and record.loginErrorCount != '' ">
			and login_error_count = #{record.loginErrorCount,jdbcType=INTEGER}
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParametersCount" parameterType="org.zhao.common.pojo.model.ZuserModel" resultType="java.lang.Integer">
		select count(*) from R_USER where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.lastLoginTime != null ">
			and last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.password != null and record.password != '' ">
			and password = #{record.password,jdbcType=VARCHAR}
		</if>
		<if test="record.infoId != null and record.infoId != '' ">
			and info_id = #{record.infoId,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.userState != null and record.userState != '' ">
			and user_state = #{record.userState,jdbcType=VARCHAR}
		</if>
		<if test="record.roleId != null and record.roleId != '' ">
			and role_id = #{record.roleId,jdbcType=VARCHAR}
		</if>
		<if test="record.loginName != null and record.loginName != '' ">
			and login_name = #{record.loginName,jdbcType=VARCHAR}
		</if>
		<if test="record.roleName != null and record.roleName != '' ">
			and role_name = #{record.roleName,jdbcType=VARCHAR}
		</if>
		<if test="record.loginErrorCount != null and record.loginErrorCount != '' ">
			and login_error_count = #{record.loginErrorCount,jdbcType=INTEGER}
		</if>
	</select>
	<select id="selectPageListByParameterRequire" resultMap="BaseResultMap">
		select * from R_USER where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.lastLoginTime != null">
			<if test="require.lastLoginTime.greaterThan != null">
					and last_login_time > #{require.lastLoginTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.lessThan != null">
					and last_login_time &lt; #{require.lastLoginTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.greaterThanAndEquals != null">
					and last_login_time >= #{require.lastLoginTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.lessThanAndEquals != null">
					and last_login_time &lt;= #{require.lastLoginTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.notEquality != null">
					and last_login_time &lt;> #{require.lastLoginTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.equality != null">
					and last_login_time = #{require.lastLoginTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.similar != null">
					and INSTR(last_login_time, #{require.lastLoginTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.password != null">
			<if test="require.password.greaterThan != null">
					and password > #{require.password.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.lessThan != null">
					and password &lt; #{require.password.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.greaterThanAndEquals != null">
					and password >= #{require.password.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.lessThanAndEquals != null">
					and password &lt;= #{require.password.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.notEquality != null">
					and password &lt;> #{require.password.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.equality != null">
					and password = #{require.password.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.similar != null">
					and INSTR(password, #{require.password.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.infoId != null">
			<if test="require.infoId.greaterThan != null">
					and info_id > #{require.infoId.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.lessThan != null">
					and info_id &lt; #{require.infoId.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.greaterThanAndEquals != null">
					and info_id >= #{require.infoId.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.lessThanAndEquals != null">
					and info_id &lt;= #{require.infoId.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.notEquality != null">
					and info_id &lt;> #{require.infoId.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.equality != null">
					and info_id = #{require.infoId.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.similar != null">
					and INSTR(info_id, #{require.infoId.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.userState != null">
			<if test="require.userState.greaterThan != null">
					and user_state > #{require.userState.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.lessThan != null">
					and user_state &lt; #{require.userState.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.greaterThanAndEquals != null">
					and user_state >= #{require.userState.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.lessThanAndEquals != null">
					and user_state &lt;= #{require.userState.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.notEquality != null">
					and user_state &lt;> #{require.userState.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.equality != null">
					and user_state = #{require.userState.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.similar != null">
					and INSTR(user_state, #{require.userState.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.roleId != null">
			<if test="require.roleId.greaterThan != null">
					and role_id > #{require.roleId.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.lessThan != null">
					and role_id &lt; #{require.roleId.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.greaterThanAndEquals != null">
					and role_id >= #{require.roleId.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.lessThanAndEquals != null">
					and role_id &lt;= #{require.roleId.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.notEquality != null">
					and role_id &lt;> #{require.roleId.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.equality != null">
					and role_id = #{require.roleId.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.similar != null">
					and INSTR(role_id, #{require.roleId.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.loginName != null">
			<if test="require.loginName.greaterThan != null">
					and login_name > #{require.loginName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.lessThan != null">
					and login_name &lt; #{require.loginName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.greaterThanAndEquals != null">
					and login_name >= #{require.loginName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.lessThanAndEquals != null">
					and login_name &lt;= #{require.loginName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.notEquality != null">
					and login_name &lt;> #{require.loginName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.equality != null">
					and login_name = #{require.loginName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.similar != null">
					and INSTR(login_name, #{require.loginName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.roleName != null">
			<if test="require.roleName.greaterThan != null">
					and role_name > #{require.roleName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.lessThan != null">
					and role_name &lt; #{require.roleName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.greaterThanAndEquals != null">
					and role_name >= #{require.roleName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.lessThanAndEquals != null">
					and role_name &lt;= #{require.roleName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.notEquality != null">
					and role_name &lt;> #{require.roleName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.equality != null">
					and role_name = #{require.roleName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.similar != null">
					and INSTR(role_name, #{require.roleName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.loginErrorCount != null">
			<if test="require.loginErrorCount.greaterThan != null">
					and login_error_count > #{require.loginErrorCount.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.lessThan != null">
					and login_error_count &lt; #{require.loginErrorCount.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.greaterThanAndEquals != null">
					and login_error_count >= #{require.loginErrorCount.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.lessThanAndEquals != null">
					and login_error_count &lt;= #{require.loginErrorCount.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.notEquality != null">
					and login_error_count &lt;> #{require.loginErrorCount.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.equality != null">
					and login_error_count = #{require.loginErrorCount.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.similar != null">
					and INSTR(login_error_count, #{require.loginErrorCount.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParameterRequireCount" parameterType="org.zhao.common.pojo.model.ZuserModel" resultType="java.lang.Integer">
		select count(*) from R_USER where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.lastLoginTime != null">
			<if test="require.lastLoginTime.greaterThan != null">
					and last_login_time > #{require.lastLoginTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.lessThan != null">
					and last_login_time &lt; #{require.lastLoginTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.greaterThanAndEquals != null">
					and last_login_time >= #{require.lastLoginTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.lessThanAndEquals != null">
					and last_login_time &lt;= #{require.lastLoginTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.notEquality != null">
					and last_login_time &lt;> #{require.lastLoginTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.equality != null">
					and last_login_time = #{require.lastLoginTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.lastLoginTime.similar != null">
					and INSTR(last_login_time, #{require.lastLoginTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.password != null">
			<if test="require.password.greaterThan != null">
					and password > #{require.password.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.lessThan != null">
					and password &lt; #{require.password.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.greaterThanAndEquals != null">
					and password >= #{require.password.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.lessThanAndEquals != null">
					and password &lt;= #{require.password.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.notEquality != null">
					and password &lt;> #{require.password.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.equality != null">
					and password = #{require.password.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.password.similar != null">
					and INSTR(password, #{require.password.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.infoId != null">
			<if test="require.infoId.greaterThan != null">
					and info_id > #{require.infoId.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.lessThan != null">
					and info_id &lt; #{require.infoId.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.greaterThanAndEquals != null">
					and info_id >= #{require.infoId.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.lessThanAndEquals != null">
					and info_id &lt;= #{require.infoId.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.notEquality != null">
					and info_id &lt;> #{require.infoId.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.equality != null">
					and info_id = #{require.infoId.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.infoId.similar != null">
					and INSTR(info_id, #{require.infoId.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.userState != null">
			<if test="require.userState.greaterThan != null">
					and user_state > #{require.userState.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.lessThan != null">
					and user_state &lt; #{require.userState.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.greaterThanAndEquals != null">
					and user_state >= #{require.userState.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.lessThanAndEquals != null">
					and user_state &lt;= #{require.userState.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.notEquality != null">
					and user_state &lt;> #{require.userState.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.equality != null">
					and user_state = #{require.userState.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.userState.similar != null">
					and INSTR(user_state, #{require.userState.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.roleId != null">
			<if test="require.roleId.greaterThan != null">
					and role_id > #{require.roleId.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.lessThan != null">
					and role_id &lt; #{require.roleId.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.greaterThanAndEquals != null">
					and role_id >= #{require.roleId.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.lessThanAndEquals != null">
					and role_id &lt;= #{require.roleId.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.notEquality != null">
					and role_id &lt;> #{require.roleId.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.equality != null">
					and role_id = #{require.roleId.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleId.similar != null">
					and INSTR(role_id, #{require.roleId.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.loginName != null">
			<if test="require.loginName.greaterThan != null">
					and login_name > #{require.loginName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.lessThan != null">
					and login_name &lt; #{require.loginName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.greaterThanAndEquals != null">
					and login_name >= #{require.loginName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.lessThanAndEquals != null">
					and login_name &lt;= #{require.loginName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.notEquality != null">
					and login_name &lt;> #{require.loginName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.equality != null">
					and login_name = #{require.loginName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginName.similar != null">
					and INSTR(login_name, #{require.loginName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.roleName != null">
			<if test="require.roleName.greaterThan != null">
					and role_name > #{require.roleName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.lessThan != null">
					and role_name &lt; #{require.roleName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.greaterThanAndEquals != null">
					and role_name >= #{require.roleName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.lessThanAndEquals != null">
					and role_name &lt;= #{require.roleName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.notEquality != null">
					and role_name &lt;> #{require.roleName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.equality != null">
					and role_name = #{require.roleName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.roleName.similar != null">
					and INSTR(role_name, #{require.roleName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.loginErrorCount != null">
			<if test="require.loginErrorCount.greaterThan != null">
					and login_error_count > #{require.loginErrorCount.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.lessThan != null">
					and login_error_count &lt; #{require.loginErrorCount.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.greaterThanAndEquals != null">
					and login_error_count >= #{require.loginErrorCount.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.lessThanAndEquals != null">
					and login_error_count &lt;= #{require.loginErrorCount.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.notEquality != null">
					and login_error_count &lt;> #{require.loginErrorCount.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.equality != null">
					and login_error_count = #{require.loginErrorCount.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.loginErrorCount.similar != null">
					and INSTR(login_error_count, #{require.loginErrorCount.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
	</select>
	<insert id="batchCreate" parameterType="java.util.List">
		insert into R_USER (
		id,last_login_time,password,info_id,create_time,user_state,role_id,login_name,role_name,login_error_count
		) values
		<foreach collection="list" item="item" index="index" separator=",">
			(
			#{item.id,jdbcType=VARCHAR},
			#{item.lastLoginTime,jdbcType=TIMESTAMP},
			#{item.password,jdbcType=VARCHAR},
			#{item.infoId,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP},
			#{item.userState,jdbcType=VARCHAR},
			#{item.roleId,jdbcType=VARCHAR},
			#{item.loginName,jdbcType=VARCHAR},
			#{item.roleName,jdbcType=VARCHAR},
			#{item.loginErrorCount,jdbcType=INTEGER}
			)
		</foreach>
	</insert>
	<delete id="deleteByParames" parameterType="org.zhao.common.pojo.model.ZuserModel">
		delete from R_USER where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.lastLoginTime != null ">
			and last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.password != null and record.password != '' ">
			and password = #{record.password,jdbcType=VARCHAR}
		</if>
		<if test="record.infoId != null and record.infoId != '' ">
			and info_id = #{record.infoId,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.userState != null and record.userState != '' ">
			and user_state = #{record.userState,jdbcType=VARCHAR}
		</if>
		<if test="record.roleId != null and record.roleId != '' ">
			and role_id = #{record.roleId,jdbcType=VARCHAR}
		</if>
		<if test="record.loginName != null and record.loginName != '' ">
			and login_name = #{record.loginName,jdbcType=VARCHAR}
		</if>
		<if test="record.roleName != null and record.roleName != '' ">
			and role_name = #{record.roleName,jdbcType=VARCHAR}
		</if>
		<if test="record.loginErrorCount != null and record.loginErrorCount != '' ">
			and login_error_count = #{record.loginErrorCount,jdbcType=INTEGER}
		</if>
	</delete>
</mapper>