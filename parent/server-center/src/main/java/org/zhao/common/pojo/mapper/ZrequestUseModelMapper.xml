<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zhao.common.pojo.dao.ZrequestUseModelMapper" >
	<resultMap id="BaseResultMap" type="org.zhao.common.pojo.model.ZrequestUseModel" >
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="request_time" property="requestTime" jdbcType="VARCHAR" />
		<result column="times" property="times" jdbcType="DOUBLE" />
		<result column="query_ip" property="queryIp" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="count" property="count" jdbcType="INTEGER" />
		<result column="service_name" property="serviceName" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id,request_time,times,query_ip,name,count,service_name
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from R_REQUEST_USE
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from R_REQUEST_USE
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.zhao.common.pojo.model.ZrequestUseModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_REQUEST_USE (id,request_time,times,query_ip,name,count,service_name)
		values (
			#{record.id,jdbcType=VARCHAR},
			#{record.requestTime,jdbcType=VARCHAR},
			#{record.times,jdbcType=DOUBLE},
			#{record.queryIp,jdbcType=VARCHAR},
			#{record.name,jdbcType=VARCHAR},
			#{record.count,jdbcType=INTEGER},
			#{record.serviceName,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.zhao.common.pojo.model.ZrequestUseModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_REQUEST_USE
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				id,
			</if>
			<if test="record.requestTime != null and record.requestTime != '' ">
				request_time,
			</if>
			<if test="record.times != null and record.times != '' ">
				times,
			</if>
			<if test="record.queryIp != null and record.queryIp != '' ">
				query_ip,
			</if>
			<if test="record.name != null and record.name != '' ">
				name,
			</if>
			<if test="record.count != null and record.count != '' ">
				count,
			</if>
			<if test="record.serviceName != null and record.serviceName != '' ">
				service_name,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				#{record.id,jdbcType=VARCHAR},
			</if>
			<if test="record.requestTime != null and record.requestTime != '' ">
				#{record.requestTime,jdbcType=VARCHAR},
			</if>
			<if test="record.times != null and record.times != '' ">
				#{record.times,jdbcType=DOUBLE},
			</if>
			<if test="record.queryIp != null and record.queryIp != '' ">
				#{record.queryIp,jdbcType=VARCHAR},
			</if>
			<if test="record.name != null and record.name != '' ">
				#{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.count != null and record.count != '' ">
				#{record.count,jdbcType=INTEGER},
			</if>
			<if test="record.serviceName != null and record.serviceName != '' ">
				#{record.serviceName,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.zhao.common.pojo.model.ZrequestUseModel">
		update R_REQUEST_USE
		<set>
			<if test="record.requestTime != null and record.requestTime != '' ">
				request_time = #{record.requestTime,jdbcType=VARCHAR},
			</if>
			<if test="record.times != null and record.times != '' ">
				times = #{record.times,jdbcType=DOUBLE},
			</if>
			<if test="record.queryIp != null and record.queryIp != '' ">
				query_ip = #{record.queryIp,jdbcType=VARCHAR},
			</if>
			<if test="record.name != null and record.name != '' ">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.count != null and record.count != '' ">
				count = #{record.count,jdbcType=INTEGER},
			</if>
			<if test="record.serviceName != null and record.serviceName != '' ">
				service_name = #{record.serviceName,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.zhao.common.pojo.model.ZrequestUseModel">
		update R_REQUEST_USE
		set
		request_time = #{record.requestTime,jdbcType=VARCHAR}
		times = #{record.times,jdbcType=DOUBLE}
		query_ip = #{record.queryIp,jdbcType=VARCHAR}
		name = #{record.name,jdbcType=VARCHAR}
		count = #{record.count,jdbcType=INTEGER}
		service_name = #{record.serviceName,jdbcType=VARCHAR}
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<select id="selectPageListByParameters" resultMap="BaseResultMap">
		select * from R_REQUEST_USE where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.requestTime != null and record.requestTime != '' ">
			and request_time = #{record.requestTime,jdbcType=VARCHAR}
		</if>
		<if test="record.times != null and record.times != '' ">
			and times = #{record.times,jdbcType=DOUBLE}
		</if>
		<if test="record.queryIp != null and record.queryIp != '' ">
			and query_ip = #{record.queryIp,jdbcType=VARCHAR}
		</if>
		<if test="record.name != null and record.name != '' ">
			and name = #{record.name,jdbcType=VARCHAR}
		</if>
		<if test="record.count != null and record.count != '' ">
			and count = #{record.count,jdbcType=INTEGER}
		</if>
		<if test="record.serviceName != null and record.serviceName != '' ">
			and service_name = #{record.serviceName,jdbcType=VARCHAR}
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParametersCount" parameterType="org.zhao.common.pojo.model.ZrequestUseModel" resultType="java.lang.Integer">
		select count(*) from R_REQUEST_USE where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.requestTime != null and record.requestTime != '' ">
			and request_time = #{record.requestTime,jdbcType=VARCHAR}
		</if>
		<if test="record.times != null and record.times != '' ">
			and times = #{record.times,jdbcType=DOUBLE}
		</if>
		<if test="record.queryIp != null and record.queryIp != '' ">
			and query_ip = #{record.queryIp,jdbcType=VARCHAR}
		</if>
		<if test="record.name != null and record.name != '' ">
			and name = #{record.name,jdbcType=VARCHAR}
		</if>
		<if test="record.count != null and record.count != '' ">
			and count = #{record.count,jdbcType=INTEGER}
		</if>
		<if test="record.serviceName != null and record.serviceName != '' ">
			and service_name = #{record.serviceName,jdbcType=VARCHAR}
		</if>
	</select>
	<select id="selectPageListByParameterRequire" resultMap="BaseResultMap">
		select * from R_REQUEST_USE where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.requestTime != null">
			<if test="require.requestTime.greaterThan != null">
					and request_time > #{require.requestTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.lessThan != null">
					and request_time &lt; #{require.requestTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.greaterThanAndEquals != null">
					and request_time >= #{require.requestTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.lessThanAndEquals != null">
					and request_time &lt;= #{require.requestTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.notEquality != null">
					and request_time &lt;> #{require.requestTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.equality != null">
					and request_time = #{require.requestTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.similar != null">
					and INSTR(request_time, #{require.requestTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.times != null">
			<if test="require.times.greaterThan != null">
					and times > #{require.times.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.lessThan != null">
					and times &lt; #{require.times.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.greaterThanAndEquals != null">
					and times >= #{require.times.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.lessThanAndEquals != null">
					and times &lt;= #{require.times.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.notEquality != null">
					and times &lt;> #{require.times.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.equality != null">
					and times = #{require.times.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.similar != null">
					and INSTR(times, #{require.times.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.queryIp != null">
			<if test="require.queryIp.greaterThan != null">
					and query_ip > #{require.queryIp.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThan != null">
					and query_ip &lt; #{require.queryIp.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.greaterThanAndEquals != null">
					and query_ip >= #{require.queryIp.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThanAndEquals != null">
					and query_ip &lt;= #{require.queryIp.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.notEquality != null">
					and query_ip &lt;> #{require.queryIp.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.equality != null">
					and query_ip = #{require.queryIp.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.similar != null">
					and INSTR(query_ip, #{require.queryIp.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.name != null">
			<if test="require.name.greaterThan != null">
					and name > #{require.name.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.lessThan != null">
					and name &lt; #{require.name.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.greaterThanAndEquals != null">
					and name >= #{require.name.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.lessThanAndEquals != null">
					and name &lt;= #{require.name.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.notEquality != null">
					and name &lt;> #{require.name.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.equality != null">
					and name = #{require.name.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.similar != null">
					and INSTR(name, #{require.name.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.count != null">
			<if test="require.count.greaterThan != null">
					and count > #{require.count.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.lessThan != null">
					and count &lt; #{require.count.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.greaterThanAndEquals != null">
					and count >= #{require.count.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.lessThanAndEquals != null">
					and count &lt;= #{require.count.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.notEquality != null">
					and count &lt;> #{require.count.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.equality != null">
					and count = #{require.count.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.similar != null">
					and INSTR(count, #{require.count.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.serviceName != null">
			<if test="require.serviceName.greaterThan != null">
					and service_name > #{require.serviceName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.lessThan != null">
					and service_name &lt; #{require.serviceName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.greaterThanAndEquals != null">
					and service_name >= #{require.serviceName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.lessThanAndEquals != null">
					and service_name &lt;= #{require.serviceName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.notEquality != null">
					and service_name &lt;> #{require.serviceName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.equality != null">
					and service_name = #{require.serviceName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.similar != null">
					and INSTR(service_name, #{require.serviceName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParameterRequireCount" parameterType="org.zhao.common.pojo.model.ZrequestUseModel" resultType="java.lang.Integer">
		select count(*) from R_REQUEST_USE where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.requestTime != null">
			<if test="require.requestTime.greaterThan != null">
					and request_time > #{require.requestTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.lessThan != null">
					and request_time &lt; #{require.requestTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.greaterThanAndEquals != null">
					and request_time >= #{require.requestTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.lessThanAndEquals != null">
					and request_time &lt;= #{require.requestTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.notEquality != null">
					and request_time &lt;> #{require.requestTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.equality != null">
					and request_time = #{require.requestTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.requestTime.similar != null">
					and INSTR(request_time, #{require.requestTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.times != null">
			<if test="require.times.greaterThan != null">
					and times > #{require.times.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.lessThan != null">
					and times &lt; #{require.times.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.greaterThanAndEquals != null">
					and times >= #{require.times.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.lessThanAndEquals != null">
					and times &lt;= #{require.times.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.notEquality != null">
					and times &lt;> #{require.times.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.equality != null">
					and times = #{require.times.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.times.similar != null">
					and INSTR(times, #{require.times.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.queryIp != null">
			<if test="require.queryIp.greaterThan != null">
					and query_ip > #{require.queryIp.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThan != null">
					and query_ip &lt; #{require.queryIp.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.greaterThanAndEquals != null">
					and query_ip >= #{require.queryIp.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThanAndEquals != null">
					and query_ip &lt;= #{require.queryIp.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.notEquality != null">
					and query_ip &lt;> #{require.queryIp.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.equality != null">
					and query_ip = #{require.queryIp.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.similar != null">
					and INSTR(query_ip, #{require.queryIp.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.name != null">
			<if test="require.name.greaterThan != null">
					and name > #{require.name.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.lessThan != null">
					and name &lt; #{require.name.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.greaterThanAndEquals != null">
					and name >= #{require.name.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.lessThanAndEquals != null">
					and name &lt;= #{require.name.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.notEquality != null">
					and name &lt;> #{require.name.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.equality != null">
					and name = #{require.name.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.name.similar != null">
					and INSTR(name, #{require.name.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.count != null">
			<if test="require.count.greaterThan != null">
					and count > #{require.count.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.lessThan != null">
					and count &lt; #{require.count.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.greaterThanAndEquals != null">
					and count >= #{require.count.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.lessThanAndEquals != null">
					and count &lt;= #{require.count.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.notEquality != null">
					and count &lt;> #{require.count.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.equality != null">
					and count = #{require.count.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.count.similar != null">
					and INSTR(count, #{require.count.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.serviceName != null">
			<if test="require.serviceName.greaterThan != null">
					and service_name > #{require.serviceName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.lessThan != null">
					and service_name &lt; #{require.serviceName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.greaterThanAndEquals != null">
					and service_name >= #{require.serviceName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.lessThanAndEquals != null">
					and service_name &lt;= #{require.serviceName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.notEquality != null">
					and service_name &lt;> #{require.serviceName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.equality != null">
					and service_name = #{require.serviceName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.serviceName.similar != null">
					and INSTR(service_name, #{require.serviceName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
	</select>
	<insert id="batchCreate" parameterType="java.util.List">
		insert into R_REQUEST_USE (
		id,request_time,times,query_ip,name,count,service_name
		) values
		<foreach collection="list" item="item" index="index" separator=",">
			(
			#{item.id,jdbcType=VARCHAR},
			#{item.requestTime,jdbcType=VARCHAR},
			#{item.times,jdbcType=DOUBLE},
			#{item.queryIp,jdbcType=VARCHAR},
			#{item.name,jdbcType=VARCHAR},
			#{item.count,jdbcType=INTEGER},
			#{item.serviceName,jdbcType=VARCHAR}
			)
		</foreach>
	</insert>
	<delete id="deleteByParames" parameterType="org.zhao.common.pojo.model.ZrequestUseModel">
		delete from R_REQUEST_USE where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.requestTime != null and record.requestTime != '' ">
			and request_time = #{record.requestTime,jdbcType=VARCHAR}
		</if>
		<if test="record.times != null and record.times != '' ">
			and times = #{record.times,jdbcType=DOUBLE}
		</if>
		<if test="record.queryIp != null and record.queryIp != '' ">
			and query_ip = #{record.queryIp,jdbcType=VARCHAR}
		</if>
		<if test="record.name != null and record.name != '' ">
			and name = #{record.name,jdbcType=VARCHAR}
		</if>
		<if test="record.count != null and record.count != '' ">
			and count = #{record.count,jdbcType=INTEGER}
		</if>
		<if test="record.serviceName != null and record.serviceName != '' ">
			and service_name = #{record.serviceName,jdbcType=VARCHAR}
		</if>
	</delete>
</mapper>