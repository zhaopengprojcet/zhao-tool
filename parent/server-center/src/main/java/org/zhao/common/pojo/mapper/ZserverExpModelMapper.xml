<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zhao.common.pojo.dao.ZserverExpModelMapper" >
	<resultMap id="BaseResultMap" type="org.zhao.common.pojo.model.ZserverExpModel" >
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="query_server_name" property="queryServerName" jdbcType="VARCHAR" />
		<result column="query_ip" property="queryIp" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="exp_desc" property="expDesc" jdbcType="VARCHAR" />
		<result column="exp_state" property="expState" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id,query_server_name,query_ip,create_time,exp_desc,exp_state
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from R_SERVER_EXP
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from R_SERVER_EXP
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.zhao.common.pojo.model.ZserverExpModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_SERVER_EXP (id,query_server_name,query_ip,create_time,exp_desc,exp_state)
		values (
			#{record.id,jdbcType=VARCHAR},
			#{record.queryServerName,jdbcType=VARCHAR},
			#{record.queryIp,jdbcType=VARCHAR},
			#{record.createTime,jdbcType=TIMESTAMP},
			#{record.expDesc,jdbcType=VARCHAR},
			#{record.expState,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.zhao.common.pojo.model.ZserverExpModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_SERVER_EXP
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				id,
			</if>
			<if test="record.queryServerName != null and record.queryServerName != '' ">
				query_server_name,
			</if>
			<if test="record.queryIp != null and record.queryIp != '' ">
				query_ip,
			</if>
			<if test="record.createTime != null ">
				create_time,
			</if>
			<if test="record.expDesc != null and record.expDesc != '' ">
				exp_desc,
			</if>
			<if test="record.expState != null and record.expState != '' ">
				exp_state,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				#{record.id,jdbcType=VARCHAR},
			</if>
			<if test="record.queryServerName != null and record.queryServerName != '' ">
				#{record.queryServerName,jdbcType=VARCHAR},
			</if>
			<if test="record.queryIp != null and record.queryIp != '' ">
				#{record.queryIp,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				#{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.expDesc != null and record.expDesc != '' ">
				#{record.expDesc,jdbcType=VARCHAR},
			</if>
			<if test="record.expState != null and record.expState != '' ">
				#{record.expState,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.zhao.common.pojo.model.ZserverExpModel">
		update R_SERVER_EXP
		<set>
			<if test="record.queryServerName != null and record.queryServerName != '' ">
				query_server_name = #{record.queryServerName,jdbcType=VARCHAR},
			</if>
			<if test="record.queryIp != null and record.queryIp != '' ">
				query_ip = #{record.queryIp,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.expDesc != null and record.expDesc != '' ">
				exp_desc = #{record.expDesc,jdbcType=VARCHAR},
			</if>
			<if test="record.expState != null and record.expState != '' ">
				exp_state = #{record.expState,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.zhao.common.pojo.model.ZserverExpModel">
		update R_SERVER_EXP
		set
		query_server_name = #{record.queryServerName,jdbcType=VARCHAR}
		query_ip = #{record.queryIp,jdbcType=VARCHAR}
		create_time = #{record.createTime,jdbcType=TIMESTAMP}
		exp_desc = #{record.expDesc,jdbcType=VARCHAR}
		exp_state = #{record.expState,jdbcType=VARCHAR}
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<select id="selectPageListByParameters" resultMap="BaseResultMap">
		select * from R_SERVER_EXP where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.queryServerName != null and record.queryServerName != '' ">
			and query_server_name = #{record.queryServerName,jdbcType=VARCHAR}
		</if>
		<if test="record.queryIp != null and record.queryIp != '' ">
			and query_ip = #{record.queryIp,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.expDesc != null and record.expDesc != '' ">
			and exp_desc = #{record.expDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.expState != null and record.expState != '' ">
			and exp_state = #{record.expState,jdbcType=VARCHAR}
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParametersCount" parameterType="org.zhao.common.pojo.model.ZserverExpModel" resultType="java.lang.Integer">
		select count(*) from R_SERVER_EXP where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.queryServerName != null and record.queryServerName != '' ">
			and query_server_name = #{record.queryServerName,jdbcType=VARCHAR}
		</if>
		<if test="record.queryIp != null and record.queryIp != '' ">
			and query_ip = #{record.queryIp,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.expDesc != null and record.expDesc != '' ">
			and exp_desc = #{record.expDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.expState != null and record.expState != '' ">
			and exp_state = #{record.expState,jdbcType=VARCHAR}
		</if>
	</select>
	<select id="selectPageListByParameterRequire" resultMap="BaseResultMap">
		select * from R_SERVER_EXP where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.queryServerName != null">
			<if test="require.queryServerName.greaterThan != null">
					and query_server_name > #{require.queryServerName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.lessThan != null">
					and query_server_name &lt; #{require.queryServerName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.greaterThanAndEquals != null">
					and query_server_name >= #{require.queryServerName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.lessThanAndEquals != null">
					and query_server_name &lt;= #{require.queryServerName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.notEquality != null">
					and query_server_name &lt;> #{require.queryServerName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.equality != null">
					and query_server_name = #{require.queryServerName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.similar != null">
					and INSTR(query_server_name, #{require.queryServerName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.queryIp != null">
			<if test="require.queryIp.greaterThan != null">
					and query_ip > #{require.queryIp.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThan != null">
					and query_ip &lt; #{require.queryIp.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.greaterThanAndEquals != null">
					and query_ip >= #{require.queryIp.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThanAndEquals != null">
					and query_ip &lt;= #{require.queryIp.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.notEquality != null">
					and query_ip &lt;> #{require.queryIp.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.equality != null">
					and query_ip = #{require.queryIp.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.similar != null">
					and INSTR(query_ip, #{require.queryIp.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.expDesc != null">
			<if test="require.expDesc.greaterThan != null">
					and exp_desc > #{require.expDesc.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.lessThan != null">
					and exp_desc &lt; #{require.expDesc.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.greaterThanAndEquals != null">
					and exp_desc >= #{require.expDesc.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.lessThanAndEquals != null">
					and exp_desc &lt;= #{require.expDesc.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.notEquality != null">
					and exp_desc &lt;> #{require.expDesc.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.equality != null">
					and exp_desc = #{require.expDesc.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.similar != null">
					and INSTR(exp_desc, #{require.expDesc.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.expState != null">
			<if test="require.expState.greaterThan != null">
					and exp_state > #{require.expState.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.lessThan != null">
					and exp_state &lt; #{require.expState.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.greaterThanAndEquals != null">
					and exp_state >= #{require.expState.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.lessThanAndEquals != null">
					and exp_state &lt;= #{require.expState.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.notEquality != null">
					and exp_state &lt;> #{require.expState.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.equality != null">
					and exp_state = #{require.expState.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.similar != null">
					and INSTR(exp_state, #{require.expState.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParameterRequireCount" parameterType="org.zhao.common.pojo.model.ZserverExpModel" resultType="java.lang.Integer">
		select count(*) from R_SERVER_EXP where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.queryServerName != null">
			<if test="require.queryServerName.greaterThan != null">
					and query_server_name > #{require.queryServerName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.lessThan != null">
					and query_server_name &lt; #{require.queryServerName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.greaterThanAndEquals != null">
					and query_server_name >= #{require.queryServerName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.lessThanAndEquals != null">
					and query_server_name &lt;= #{require.queryServerName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.notEquality != null">
					and query_server_name &lt;> #{require.queryServerName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.equality != null">
					and query_server_name = #{require.queryServerName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryServerName.similar != null">
					and INSTR(query_server_name, #{require.queryServerName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.queryIp != null">
			<if test="require.queryIp.greaterThan != null">
					and query_ip > #{require.queryIp.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThan != null">
					and query_ip &lt; #{require.queryIp.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.greaterThanAndEquals != null">
					and query_ip >= #{require.queryIp.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.lessThanAndEquals != null">
					and query_ip &lt;= #{require.queryIp.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.notEquality != null">
					and query_ip &lt;> #{require.queryIp.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.equality != null">
					and query_ip = #{require.queryIp.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.queryIp.similar != null">
					and INSTR(query_ip, #{require.queryIp.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.expDesc != null">
			<if test="require.expDesc.greaterThan != null">
					and exp_desc > #{require.expDesc.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.lessThan != null">
					and exp_desc &lt; #{require.expDesc.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.greaterThanAndEquals != null">
					and exp_desc >= #{require.expDesc.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.lessThanAndEquals != null">
					and exp_desc &lt;= #{require.expDesc.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.notEquality != null">
					and exp_desc &lt;> #{require.expDesc.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.equality != null">
					and exp_desc = #{require.expDesc.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expDesc.similar != null">
					and INSTR(exp_desc, #{require.expDesc.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.expState != null">
			<if test="require.expState.greaterThan != null">
					and exp_state > #{require.expState.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.lessThan != null">
					and exp_state &lt; #{require.expState.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.greaterThanAndEquals != null">
					and exp_state >= #{require.expState.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.lessThanAndEquals != null">
					and exp_state &lt;= #{require.expState.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.notEquality != null">
					and exp_state &lt;> #{require.expState.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.equality != null">
					and exp_state = #{require.expState.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.expState.similar != null">
					and INSTR(exp_state, #{require.expState.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
	</select>
	<insert id="batchCreate" parameterType="java.util.List">
		insert into R_SERVER_EXP (
		id,query_server_name,query_ip,create_time,exp_desc,exp_state
		) values
		<foreach collection="list" item="item" index="index" separator=",">
			(
			#{item.id,jdbcType=VARCHAR},
			#{item.queryServerName,jdbcType=VARCHAR},
			#{item.queryIp,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP},
			#{item.expDesc,jdbcType=VARCHAR},
			#{item.expState,jdbcType=VARCHAR}
			)
		</foreach>
	</insert>
	<delete id="deleteByParames" parameterType="org.zhao.common.pojo.model.ZserverExpModel">
		delete from R_SERVER_EXP where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.queryServerName != null and record.queryServerName != '' ">
			and query_server_name = #{record.queryServerName,jdbcType=VARCHAR}
		</if>
		<if test="record.queryIp != null and record.queryIp != '' ">
			and query_ip = #{record.queryIp,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.expDesc != null and record.expDesc != '' ">
			and exp_desc = #{record.expDesc,jdbcType=VARCHAR}
		</if>
		<if test="record.expState != null and record.expState != '' ">
			and exp_state = #{record.expState,jdbcType=VARCHAR}
		</if>
	</delete>
</mapper>