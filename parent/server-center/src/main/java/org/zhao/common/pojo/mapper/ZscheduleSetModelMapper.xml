<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.zhao.common.pojo.dao.ZscheduleSetModelMapper" >
	<resultMap id="BaseResultMap" type="org.zhao.common.pojo.model.ZscheduleSetModel" >
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="schedule_name" property="scheduleName" jdbcType="VARCHAR" />
		<result column="schedule_state" property="scheduleState" jdbcType="VARCHAR" />
		<result column="schedule_type" property="scheduleType" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="schedule_key" property="scheduleKey" jdbcType="VARCHAR" />
		<result column="schedule_cron" property="scheduleCron" jdbcType="VARCHAR" />
		<result column="push_type" property="pushType" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id,schedule_name,schedule_state,schedule_type,create_time,schedule_key,schedule_cron,push_type
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from R_SCHEDULE_REGIEST
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from R_SCHEDULE_REGIEST
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="org.zhao.common.pojo.model.ZscheduleSetModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_SCHEDULE_REGIEST (id,schedule_name,schedule_state,schedule_type,create_time,schedule_key,schedule_cron,push_type)
		values (
			#{record.id,jdbcType=VARCHAR},
			#{record.scheduleName,jdbcType=VARCHAR},
			#{record.scheduleState,jdbcType=VARCHAR},
			#{record.scheduleType,jdbcType=VARCHAR},
			#{record.createTime,jdbcType=TIMESTAMP},
			#{record.scheduleKey,jdbcType=VARCHAR},
			#{record.scheduleCron,jdbcType=VARCHAR},
			#{record.pushType,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="org.zhao.common.pojo.model.ZscheduleSetModel" useGeneratedKeys="true" keyProperty="id">
		insert into R_SCHEDULE_REGIEST
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				id,
			</if>
			<if test="record.scheduleName != null and record.scheduleName != '' ">
				schedule_name,
			</if>
			<if test="record.scheduleState != null and record.scheduleState != '' ">
				schedule_state,
			</if>
			<if test="record.scheduleType != null and record.scheduleType != '' ">
				schedule_type,
			</if>
			<if test="record.createTime != null ">
				create_time,
			</if>
			<if test="record.scheduleKey != null and record.scheduleKey != '' ">
				schedule_key,
			</if>
			<if test="record.scheduleCron != null and record.scheduleCron != '' ">
				schedule_cron,
			</if>
			<if test="record.pushType != null and record.pushType != '' ">
				push_type,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="record.id != null and record.id != '' ">
				#{record.id,jdbcType=VARCHAR},
			</if>
			<if test="record.scheduleName != null and record.scheduleName != '' ">
				#{record.scheduleName,jdbcType=VARCHAR},
			</if>
			<if test="record.scheduleState != null and record.scheduleState != '' ">
				#{record.scheduleState,jdbcType=VARCHAR},
			</if>
			<if test="record.scheduleType != null and record.scheduleType != '' ">
				#{record.scheduleType,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				#{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.scheduleKey != null and record.scheduleKey != '' ">
				#{record.scheduleKey,jdbcType=VARCHAR},
			</if>
			<if test="record.scheduleCron != null and record.scheduleCron != '' ">
				#{record.scheduleCron,jdbcType=VARCHAR},
			</if>
			<if test="record.pushType != null and record.pushType != '' ">
				#{record.pushType,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="org.zhao.common.pojo.model.ZscheduleSetModel">
		update R_SCHEDULE_REGIEST
		<set>
			<if test="record.scheduleName != null and record.scheduleName != '' ">
				schedule_name = #{record.scheduleName,jdbcType=VARCHAR},
			</if>
			<if test="record.scheduleState != null and record.scheduleState != '' ">
				schedule_state = #{record.scheduleState,jdbcType=VARCHAR},
			</if>
			<if test="record.scheduleType != null and record.scheduleType != '' ">
				schedule_type = #{record.scheduleType,jdbcType=VARCHAR},
			</if>
			<if test="record.createTime != null ">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.scheduleKey != null and record.scheduleKey != '' ">
				schedule_key = #{record.scheduleKey,jdbcType=VARCHAR},
			</if>
			<if test="record.scheduleCron != null and record.scheduleCron != '' ">
				schedule_cron = #{record.scheduleCron,jdbcType=VARCHAR},
			</if>
			<if test="record.pushType != null and record.pushType != '' ">
				push_type = #{record.pushType,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="org.zhao.common.pojo.model.ZscheduleSetModel">
		update R_SCHEDULE_REGIEST
		set
		schedule_name = #{record.scheduleName,jdbcType=VARCHAR}
		schedule_state = #{record.scheduleState,jdbcType=VARCHAR}
		schedule_type = #{record.scheduleType,jdbcType=VARCHAR}
		create_time = #{record.createTime,jdbcType=TIMESTAMP}
		schedule_key = #{record.scheduleKey,jdbcType=VARCHAR}
		schedule_cron = #{record.scheduleCron,jdbcType=VARCHAR}
		push_type = #{record.pushType,jdbcType=VARCHAR}
		where id = #{record.id,jdbcType=VARCHAR}
	</update>
	<select id="selectPageListByParameters" resultMap="BaseResultMap">
		select * from R_SCHEDULE_REGIEST where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleName != null and record.scheduleName != '' ">
			and schedule_name = #{record.scheduleName,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleState != null and record.scheduleState != '' ">
			and schedule_state = #{record.scheduleState,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleType != null and record.scheduleType != '' ">
			and schedule_type = #{record.scheduleType,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.scheduleKey != null and record.scheduleKey != '' ">
			and schedule_key = #{record.scheduleKey,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleCron != null and record.scheduleCron != '' ">
			and schedule_cron = #{record.scheduleCron,jdbcType=VARCHAR}
		</if>
		<if test="record.pushType != null and record.pushType != '' ">
			and push_type = #{record.pushType,jdbcType=VARCHAR}
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParametersCount" parameterType="org.zhao.common.pojo.model.ZscheduleSetModel" resultType="java.lang.Integer">
		select count(*) from R_SCHEDULE_REGIEST where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleName != null and record.scheduleName != '' ">
			and schedule_name = #{record.scheduleName,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleState != null and record.scheduleState != '' ">
			and schedule_state = #{record.scheduleState,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleType != null and record.scheduleType != '' ">
			and schedule_type = #{record.scheduleType,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.scheduleKey != null and record.scheduleKey != '' ">
			and schedule_key = #{record.scheduleKey,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleCron != null and record.scheduleCron != '' ">
			and schedule_cron = #{record.scheduleCron,jdbcType=VARCHAR}
		</if>
		<if test="record.pushType != null and record.pushType != '' ">
			and push_type = #{record.pushType,jdbcType=VARCHAR}
		</if>
	</select>
	<select id="selectPageListByParameterRequire" resultMap="BaseResultMap">
		select * from R_SCHEDULE_REGIEST where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleName != null">
			<if test="require.scheduleName.greaterThan != null">
					and schedule_name > #{require.scheduleName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.lessThan != null">
					and schedule_name &lt; #{require.scheduleName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.greaterThanAndEquals != null">
					and schedule_name >= #{require.scheduleName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.lessThanAndEquals != null">
					and schedule_name &lt;= #{require.scheduleName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.notEquality != null">
					and schedule_name &lt;> #{require.scheduleName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.equality != null">
					and schedule_name = #{require.scheduleName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.similar != null">
					and INSTR(schedule_name, #{require.scheduleName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleState != null">
			<if test="require.scheduleState.greaterThan != null">
					and schedule_state > #{require.scheduleState.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.lessThan != null">
					and schedule_state &lt; #{require.scheduleState.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.greaterThanAndEquals != null">
					and schedule_state >= #{require.scheduleState.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.lessThanAndEquals != null">
					and schedule_state &lt;= #{require.scheduleState.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.notEquality != null">
					and schedule_state &lt;> #{require.scheduleState.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.equality != null">
					and schedule_state = #{require.scheduleState.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.similar != null">
					and INSTR(schedule_state, #{require.scheduleState.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleType != null">
			<if test="require.scheduleType.greaterThan != null">
					and schedule_type > #{require.scheduleType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.lessThan != null">
					and schedule_type &lt; #{require.scheduleType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.greaterThanAndEquals != null">
					and schedule_type >= #{require.scheduleType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.lessThanAndEquals != null">
					and schedule_type &lt;= #{require.scheduleType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.notEquality != null">
					and schedule_type &lt;> #{require.scheduleType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.equality != null">
					and schedule_type = #{require.scheduleType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.similar != null">
					and INSTR(schedule_type, #{require.scheduleType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleKey != null">
			<if test="require.scheduleKey.greaterThan != null">
					and schedule_key > #{require.scheduleKey.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.lessThan != null">
					and schedule_key &lt; #{require.scheduleKey.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.greaterThanAndEquals != null">
					and schedule_key >= #{require.scheduleKey.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.lessThanAndEquals != null">
					and schedule_key &lt;= #{require.scheduleKey.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.notEquality != null">
					and schedule_key &lt;> #{require.scheduleKey.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.equality != null">
					and schedule_key = #{require.scheduleKey.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.similar != null">
					and INSTR(schedule_key, #{require.scheduleKey.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleCron != null">
			<if test="require.scheduleCron.greaterThan != null">
					and schedule_cron > #{require.scheduleCron.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.lessThan != null">
					and schedule_cron &lt; #{require.scheduleCron.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.greaterThanAndEquals != null">
					and schedule_cron >= #{require.scheduleCron.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.lessThanAndEquals != null">
					and schedule_cron &lt;= #{require.scheduleCron.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.notEquality != null">
					and schedule_cron &lt;> #{require.scheduleCron.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.equality != null">
					and schedule_cron = #{require.scheduleCron.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.similar != null">
					and INSTR(schedule_cron, #{require.scheduleCron.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.pushType != null">
			<if test="require.pushType.greaterThan != null">
					and push_type > #{require.pushType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.lessThan != null">
					and push_type &lt; #{require.pushType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.greaterThanAndEquals != null">
					and push_type >= #{require.pushType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.lessThanAndEquals != null">
					and push_type &lt;= #{require.pushType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.notEquality != null">
					and push_type &lt;> #{require.pushType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.equality != null">
					and push_type = #{require.pushType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.similar != null">
					and INSTR(push_type, #{require.pushType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test=" page != null ">
			<if test=" page.order != null  and page.order != '' ">
				order by ${page.order } ${page.orderBy}
			</if>
			<if test=" page.start  != null  and page.count  != null ">
				limit #{page.start } , #{page.count }
			</if>
		</if>
	</select>
	<select id="selectPageListByParameterRequireCount" parameterType="org.zhao.common.pojo.model.ZscheduleSetModel" resultType="java.lang.Integer">
		select count(*) from R_SCHEDULE_REGIEST where 1 = 1
		<if test="require.id != null">
			<if test="require.id.greaterThan != null">
					and id > #{require.id.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThan != null">
					and id &lt; #{require.id.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.greaterThanAndEquals != null">
					and id >= #{require.id.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.lessThanAndEquals != null">
					and id &lt;= #{require.id.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.notEquality != null">
					and id &lt;> #{require.id.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.equality != null">
					and id = #{require.id.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.id.similar != null">
					and INSTR(id, #{require.id.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleName != null">
			<if test="require.scheduleName.greaterThan != null">
					and schedule_name > #{require.scheduleName.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.lessThan != null">
					and schedule_name &lt; #{require.scheduleName.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.greaterThanAndEquals != null">
					and schedule_name >= #{require.scheduleName.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.lessThanAndEquals != null">
					and schedule_name &lt;= #{require.scheduleName.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.notEquality != null">
					and schedule_name &lt;> #{require.scheduleName.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.equality != null">
					and schedule_name = #{require.scheduleName.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleName.similar != null">
					and INSTR(schedule_name, #{require.scheduleName.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleState != null">
			<if test="require.scheduleState.greaterThan != null">
					and schedule_state > #{require.scheduleState.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.lessThan != null">
					and schedule_state &lt; #{require.scheduleState.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.greaterThanAndEquals != null">
					and schedule_state >= #{require.scheduleState.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.lessThanAndEquals != null">
					and schedule_state &lt;= #{require.scheduleState.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.notEquality != null">
					and schedule_state &lt;> #{require.scheduleState.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.equality != null">
					and schedule_state = #{require.scheduleState.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleState.similar != null">
					and INSTR(schedule_state, #{require.scheduleState.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleType != null">
			<if test="require.scheduleType.greaterThan != null">
					and schedule_type > #{require.scheduleType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.lessThan != null">
					and schedule_type &lt; #{require.scheduleType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.greaterThanAndEquals != null">
					and schedule_type >= #{require.scheduleType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.lessThanAndEquals != null">
					and schedule_type &lt;= #{require.scheduleType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.notEquality != null">
					and schedule_type &lt;> #{require.scheduleType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.equality != null">
					and schedule_type = #{require.scheduleType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleType.similar != null">
					and INSTR(schedule_type, #{require.scheduleType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.createTime != null">
			<if test="require.createTime.greaterThan != null">
					and create_time > #{require.createTime.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThan != null">
					and create_time &lt; #{require.createTime.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.greaterThanAndEquals != null">
					and create_time >= #{require.createTime.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.lessThanAndEquals != null">
					and create_time &lt;= #{require.createTime.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.notEquality != null">
					and create_time &lt;> #{require.createTime.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.equality != null">
					and create_time = #{require.createTime.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.createTime.similar != null">
					and INSTR(create_time, #{require.createTime.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleKey != null">
			<if test="require.scheduleKey.greaterThan != null">
					and schedule_key > #{require.scheduleKey.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.lessThan != null">
					and schedule_key &lt; #{require.scheduleKey.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.greaterThanAndEquals != null">
					and schedule_key >= #{require.scheduleKey.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.lessThanAndEquals != null">
					and schedule_key &lt;= #{require.scheduleKey.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.notEquality != null">
					and schedule_key &lt;> #{require.scheduleKey.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.equality != null">
					and schedule_key = #{require.scheduleKey.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleKey.similar != null">
					and INSTR(schedule_key, #{require.scheduleKey.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.scheduleCron != null">
			<if test="require.scheduleCron.greaterThan != null">
					and schedule_cron > #{require.scheduleCron.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.lessThan != null">
					and schedule_cron &lt; #{require.scheduleCron.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.greaterThanAndEquals != null">
					and schedule_cron >= #{require.scheduleCron.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.lessThanAndEquals != null">
					and schedule_cron &lt;= #{require.scheduleCron.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.notEquality != null">
					and schedule_cron &lt;> #{require.scheduleCron.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.equality != null">
					and schedule_cron = #{require.scheduleCron.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.scheduleCron.similar != null">
					and INSTR(schedule_cron, #{require.scheduleCron.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
		<if test="require.pushType != null">
			<if test="require.pushType.greaterThan != null">
					and push_type > #{require.pushType.greaterThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.lessThan != null">
					and push_type &lt; #{require.pushType.lessThan , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.greaterThanAndEquals != null">
					and push_type >= #{require.pushType.greaterThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.lessThanAndEquals != null">
					and push_type &lt;= #{require.pushType.lessThanAndEquals , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.notEquality != null">
					and push_type &lt;> #{require.pushType.notEquality , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.equality != null">
					and push_type = #{require.pushType.equality , jdbcType=VARCHAR }
		    </if>
			<if test="require.pushType.similar != null">
					and INSTR(push_type, #{require.pushType.similar , jdbcType=VARCHAR }) >0 
		    </if>
		</if>
	</select>
	<insert id="batchCreate" parameterType="java.util.List">
		insert into R_SCHEDULE_REGIEST (
		id,schedule_name,schedule_state,schedule_type,create_time,schedule_key,schedule_cron,push_type
		) values
		<foreach collection="list" item="item" index="index" separator=",">
			(
			#{item.id,jdbcType=VARCHAR},
			#{item.scheduleName,jdbcType=VARCHAR},
			#{item.scheduleState,jdbcType=VARCHAR},
			#{item.scheduleType,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP},
			#{item.scheduleKey,jdbcType=VARCHAR},
			#{item.scheduleCron,jdbcType=VARCHAR},
			#{item.pushType,jdbcType=VARCHAR}
			)
		</foreach>
	</insert>
	<delete id="deleteByParames" parameterType="org.zhao.common.pojo.model.ZscheduleSetModel">
		delete from R_SCHEDULE_REGIEST where 1 = 1
		<if test="record.id != null and record.id != '' ">
			and id = #{record.id,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleName != null and record.scheduleName != '' ">
			and schedule_name = #{record.scheduleName,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleState != null and record.scheduleState != '' ">
			and schedule_state = #{record.scheduleState,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleType != null and record.scheduleType != '' ">
			and schedule_type = #{record.scheduleType,jdbcType=VARCHAR}
		</if>
		<if test="record.createTime != null ">
			and create_time = #{record.createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="record.scheduleKey != null and record.scheduleKey != '' ">
			and schedule_key = #{record.scheduleKey,jdbcType=VARCHAR}
		</if>
		<if test="record.scheduleCron != null and record.scheduleCron != '' ">
			and schedule_cron = #{record.scheduleCron,jdbcType=VARCHAR}
		</if>
		<if test="record.pushType != null and record.pushType != '' ">
			and push_type = #{record.pushType,jdbcType=VARCHAR}
		</if>
	</delete>
</mapper>